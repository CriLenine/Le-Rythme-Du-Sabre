//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Actions/MoveCubes.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MoveCubes : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MoveCubes()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MoveCubes"",
    ""maps"": [
        {
            ""name"": ""MovesCube"",
            ""id"": ""8441c7c7-a18d-4e78-b775-6b5c04df0b3f"",
            ""actions"": [
                {
                    ""name"": ""ForwardBackward"",
                    ""type"": ""Value"",
                    ""id"": ""4a18cbd1-6815-4fe3-a24c-344d7cdb092a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StopMoving"",
                    ""type"": ""Value"",
                    ""id"": ""ac1a9aea-e32a-491a-91e5-a22d04704ad0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fde1b14-2184-40c0-8def-5fb344b7cde7"",
                    ""path"": ""<XRController>{LeftHand}/touchpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14550e61-f517-447b-9813-5c5115ed9423"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpawnCube"",
            ""id"": ""3c09380c-0522-46ca-8863-0f07c8ffd959"",
            ""actions"": [
                {
                    ""name"": ""spawncube"",
                    ""type"": ""Value"",
                    ""id"": ""558e5d09-e1c0-4aeb-8665-bc647d87c5b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36e83c54-6536-417e-8f41-dcb63ccb0596"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""spawncube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovesCube
        m_MovesCube = asset.FindActionMap("MovesCube", throwIfNotFound: true);
        m_MovesCube_ForwardBackward = m_MovesCube.FindAction("ForwardBackward", throwIfNotFound: true);
        m_MovesCube_StopMoving = m_MovesCube.FindAction("StopMoving", throwIfNotFound: true);
        // SpawnCube
        m_SpawnCube = asset.FindActionMap("SpawnCube", throwIfNotFound: true);
        m_SpawnCube_spawncube = m_SpawnCube.FindAction("spawncube", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovesCube
    private readonly InputActionMap m_MovesCube;
    private IMovesCubeActions m_MovesCubeActionsCallbackInterface;
    private readonly InputAction m_MovesCube_ForwardBackward;
    private readonly InputAction m_MovesCube_StopMoving;
    public struct MovesCubeActions
    {
        private @MoveCubes m_Wrapper;
        public MovesCubeActions(@MoveCubes wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardBackward => m_Wrapper.m_MovesCube_ForwardBackward;
        public InputAction @StopMoving => m_Wrapper.m_MovesCube_StopMoving;
        public InputActionMap Get() { return m_Wrapper.m_MovesCube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovesCubeActions set) { return set.Get(); }
        public void SetCallbacks(IMovesCubeActions instance)
        {
            if (m_Wrapper.m_MovesCubeActionsCallbackInterface != null)
            {
                @ForwardBackward.started -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnForwardBackward;
                @ForwardBackward.performed -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnForwardBackward;
                @ForwardBackward.canceled -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnForwardBackward;
                @StopMoving.started -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnStopMoving;
                @StopMoving.performed -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnStopMoving;
                @StopMoving.canceled -= m_Wrapper.m_MovesCubeActionsCallbackInterface.OnStopMoving;
            }
            m_Wrapper.m_MovesCubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardBackward.started += instance.OnForwardBackward;
                @ForwardBackward.performed += instance.OnForwardBackward;
                @ForwardBackward.canceled += instance.OnForwardBackward;
                @StopMoving.started += instance.OnStopMoving;
                @StopMoving.performed += instance.OnStopMoving;
                @StopMoving.canceled += instance.OnStopMoving;
            }
        }
    }
    public MovesCubeActions @MovesCube => new MovesCubeActions(this);

    // SpawnCube
    private readonly InputActionMap m_SpawnCube;
    private ISpawnCubeActions m_SpawnCubeActionsCallbackInterface;
    private readonly InputAction m_SpawnCube_spawncube;
    public struct SpawnCubeActions
    {
        private @MoveCubes m_Wrapper;
        public SpawnCubeActions(@MoveCubes wrapper) { m_Wrapper = wrapper; }
        public InputAction @spawncube => m_Wrapper.m_SpawnCube_spawncube;
        public InputActionMap Get() { return m_Wrapper.m_SpawnCube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnCubeActions set) { return set.Get(); }
        public void SetCallbacks(ISpawnCubeActions instance)
        {
            if (m_Wrapper.m_SpawnCubeActionsCallbackInterface != null)
            {
                @spawncube.started -= m_Wrapper.m_SpawnCubeActionsCallbackInterface.OnSpawncube;
                @spawncube.performed -= m_Wrapper.m_SpawnCubeActionsCallbackInterface.OnSpawncube;
                @spawncube.canceled -= m_Wrapper.m_SpawnCubeActionsCallbackInterface.OnSpawncube;
            }
            m_Wrapper.m_SpawnCubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @spawncube.started += instance.OnSpawncube;
                @spawncube.performed += instance.OnSpawncube;
                @spawncube.canceled += instance.OnSpawncube;
            }
        }
    }
    public SpawnCubeActions @SpawnCube => new SpawnCubeActions(this);
    public interface IMovesCubeActions
    {
        void OnForwardBackward(InputAction.CallbackContext context);
        void OnStopMoving(InputAction.CallbackContext context);
    }
    public interface ISpawnCubeActions
    {
        void OnSpawncube(InputAction.CallbackContext context);
    }
}
